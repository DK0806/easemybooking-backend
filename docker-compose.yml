name: easemybooking

services:
  # =========================
  # Infra: Discovery (Eureka)
  # =========================
  discovery-service:
    build:
      context: ./discovery-service
    image: easemybooking/discovery-service:dev
    container_name: discovery-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8761/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 15
    networks: [backend]



#  api-gateway:
#    build:
#      context: ./gateway-service
#    image: easemybooking/gateway-service:dev
#    container_name: api-gateway
#    environment:
#      SPRING_PROFILES_ACTIVE: docker
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
#
#      # JWT must match auth-service
#      JWT_SECRET: ${JWT_SECRET}
#      JWT_ISSUER: ${JWT_ISSUER:-easemybooking-auth}
#
#      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
#    ports:
#      - "8080:8080"
#    depends_on:
#      discovery-service: { condition: service_healthy }
#    networks: [ backend ]


  # ==========
  # Databases
  # ==========
  auth-db:
    image: postgres:17
    container_name: auth-db
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
      POSTGRES_DB: easemybooking_auth
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d easemybooking_auth"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [backend]

  booking-db:
    image: postgres:17
    container_name: booking-db
    environment:
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_pass
      POSTGRES_DB: easemybooking_booking
    volumes:
      - booking_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d easemybooking_booking"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [backend]

  place-db:
    image: mongo:7
    container_name: place-db
    volumes:
      - place_mongo_data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [backend]

  # ===============
  # Microservices
  # ===============
  auth-service:
    build:
      context: ./auth-service
    image: easemybooking/auth-service:dev
    container_name: auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # DB
      DB_URL: jdbc:postgresql://auth-db:5432/easemybooking_auth
      DB_USERNAME: auth_user
      DB_PASSWORD: auth_pass
      # JWT (Base64 HS256)
      JWT_SECRET: ${JWT_SECRET}
      # Eureka
      EUREKA_CLIENT_ENABLED: "true"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_APPLICATION_NAME: auth-service
    ports:
      - "8081:8081"
    depends_on:
      discovery-service: { condition: service_healthy }
      auth-db:          { condition: service_healthy }
    networks: [backend]

  place-service:
    build:
      context: ./place-service
    image: easemybooking/place-service:dev
    container_name: place-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Mongo inside the compose network
      SPRING_DATA_MONGODB_URI: mongodb://place-db:27017/placesdb
      # Toggle auth in container
      SECURITY_DISABLED: "false"
      JWT_SECRET: ${JWT_SECRET}
      # Eureka
      EUREKA_CLIENT_ENABLED: "true"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_APPLICATION_NAME: place-service
    ports:
      - "8083:8083"
    depends_on:
      discovery-service: { condition: service_healthy }
      place-db:          { condition: service_healthy }
    networks: [backend]

  booking-service:
    build:
      context: ./booking-service
    image: easemybooking/booking-service:dev
    container_name: booking-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # DB
      SPRING_DATASOURCE_URL: jdbc:postgresql://booking-db:5432/easemybooking_booking
      SPRING_DATASOURCE_USERNAME: booking_user
      SPRING_DATASOURCE_PASSWORD: booking_pass
      # JWT (same as auth/places)
      JWT_SECRET: ${JWT_SECRET}
      # How booking calls place-service (container DNS)
      PLACE_BASE_URL: http://place-service:8083
      PLACE_PLACE_PATH: /api/v1/places/{placeId}
      # Eureka (NO trailing slash)
      EUREKA_CLIENT_ENABLED: "true"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_APPLICATION_NAME: booking-service
    ports:
      - "8084:8084"
    depends_on:
      discovery-service: { condition: service_healthy }
      booking-db:        { condition: service_healthy }
    networks: [backend]

networks:
  backend:

volumes:
  auth_pgdata:
  booking_pgdata:
  place_mongo_data:
