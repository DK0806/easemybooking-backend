server:
  port: 8084
  forward-headers-strategy: framework

spring:
  application:
    name: booking-service

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/easemybooking_booking}
    username: ${DB_USERNAME:booking_user}
    password: ${DB_PASSWORD:booking_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      pool-name: booking-hikari

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: false

  flyway:
    enabled: true
    validate-on-migrate: true
    baseline-on-migrate: true
    locations: classpath:db/migration

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true

jwt:
  issuer: easemybooking-auth
  # Same Base64 HS256 key used by auth-service
  secret: ${JWT_SECRET}

# How booking-service calls place-service (used by PlaceClient)
place:
  base-url: ${PLACE_BASE_URL:http://localhost:8083}
  place-path: ${PLACE_PLACE_PATH:/api/v1/places/{placeId}}
  timeout-ms: ${PLACE_TIMEOUT_MS:2000}

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when_authorized

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html

---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    # DB container hostname from docker-compose
    url: ${DB_URL:jdbc:postgresql://booking-db:5432/easemybooking_booking}
    username: ${DB_USERNAME:booking_user}
    password: ${DB_PASSWORD:booking_pass}

# Use service names inside the Docker network
place:
  base-url: ${PLACE_BASE_URL:http://place-service:8083}

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://discovery-service:8761/eureka/}

management:
  endpoint:
    health:
      show-details: never
